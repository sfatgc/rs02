name: release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

permissions:
  contents: write

env:
  BIN_NAME: midir-tui

jobs:
  build-matrix:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # macOS
          - os: macos-13
            target: x86_64-apple-darwin
            archive: tar.gz
          - os: macos-14
            target: aarch64-apple-darwin
            archive: tar.gz

          # Windows
          - os: windows-2022
            target: x86_64-pc-windows-msvc
            archive: zip
          - os: windows-2022
            target: aarch64-pc-windows-msvc
            archive: zip

          # Linux x86_64 (native)
          - os: ubuntu-24.04
            target: x86_64-unknown-linux-gnu
            archive: tar.gz

    steps:
      - name: Check out
        uses: actions/checkout@v5

      - name: Install Rust ${{ matrix.target }}
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      # ALSA headers for Linux x86_64 (for midir)
      - name: Apt deps (Linux only)
        if: matrix.os == 'ubuntu-24.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libasound2-dev

      - name: Cache
        uses: Swatinem/rust-cache@v2

      - name: Build
        shell: bash
        run: |
          cargo build --release --target ${{ matrix.target }}

      - name: Prepare package
        id: pkg
        shell: bash
        run: |
          set -euo pipefail
          REF_NAME="${GITHUB_REF_NAME}"
          TARGET="${{ matrix.target }}"
          BIN="${BIN_NAME}"
          EXE_SUFFIX=""
          if [[ "$TARGET" == *"windows"* ]]; then EXE_SUFFIX=".exe"; fi

          OUTDIR="dist"
          mkdir -p "$OUTDIR"

          PKG="${BIN}-${REF_NAME}-${TARGET}"
          mkdir -p "$PKG"
          cp "target/${TARGET}/release/${BIN}${EXE_SUFFIX}" "$PKG/"

          # Optional: include README & LICENSE if present
          [[ -f README.md ]] && cp README.md "$PKG/"
          [[ -f LICENSE* ]] && cp LICENSE* "$PKG/" || true

          if [[ "${{ matrix.archive }}" == "zip" ]]; then
            ARCHIVE="${PKG}.zip"
            (cd "$PKG" && "C:\Program Files\7-Zip\7z.exe" a -tzip  "../${OUTDIR}/${ARCHIVE}" .)
          else
            ARCHIVE="${PKG}.tar.gz"
            tar -C "$PKG" -czf "${OUTDIR}/${ARCHIVE}" .
          fi

          # checksums
          (cd "$OUTDIR" && shasum -a 256 "$ARCHIVE" > "${ARCHIVE}.sha256" || sha256sum "$ARCHIVE" > "${ARCHIVE}.sha256")

          echo "archive_path=${OUTDIR}/${ARCHIVE}" >> "$GITHUB_OUTPUT"
          echo "checksum_path=${OUTDIR}/${ARCHIVE}.sha256" >> "$GITHUB_OUTPUT"

      - name: Upload release asset
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{ steps.pkg.outputs.archive_path }}
            ${{ steps.pkg.outputs.checksum_path }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Linux aarch64 using QEMU (ensures libasound dev libs exist)
  build-linux-arm64:
    name: Build aarch64-unknown-linux-gnu
    runs-on: ubuntu-24.04
    steps:
      - name: Check out
        uses: actions/checkout@v5

      - name: Set up QEMU aarch64
        uses: docker/setup-qemu-action@v3

      - name: Build in aarch64 container
        uses: uraimo/run-on-arch-action@v3
        with:
          arch: aarch64
          distro: ubuntu22.04
          install: |
            apt-get update
            apt-get install -y curl ca-certificates build-essential pkg-config libasound2-dev
            curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain stable
            . $HOME/.cargo/env
          run: |
            set -euo pipefail
            . $HOME/.cargo/env
            rustup target add aarch64-unknown-linux-gnu
            cargo build --release --target aarch64-unknown-linux-gnu

            BIN_NAME="midir-tui"
            REF_NAME="${GITHUB_REF_NAME}"
            TARGET="aarch64-unknown-linux-gnu"

            PKG="${BIN_NAME}-${REF_NAME}-${TARGET}"
            mkdir -p "$PKG"
            cp "target/${TARGET}/release/${BIN_NAME}" "$PKG/"
            [ -f README.md ] && cp README.md "$PKG/"
            [ -f LICENSE* ] && cp LICENSE* "$PKG/" || true

            mkdir -p dist
            tar -C "$PKG" -czf "dist/${PKG}.tar.gz" .
            (cd dist && sha256sum "${PKG}.tar.gz" > "${PKG}.tar.gz.sha256" || shasum -a 256 "${PKG}.tar.gz" > "${PKG}.tar.gz.sha256")
        env:
          CARGO_TERM_COLOR: always

      - name: Upload release asset
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/midir-tui-${{ github.ref_name }}-aarch64-unknown-linux-gnu.tar.gz
            dist/midir-tui-${{ github.ref_name }}-aarch64-unknown-linux-gnu.tar.gz.sha256
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
